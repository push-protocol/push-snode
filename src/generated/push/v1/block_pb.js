// source: push/v1/block.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.push.v1.Attachment', null, global);
goog.exportSymbol('proto.push.v1.Block', null, global);
goog.exportSymbol('proto.push.v1.DidMapping', null, global);
goog.exportSymbol('proto.push.v1.Email', null, global);
goog.exportSymbol('proto.push.v1.EncryptedNotif', null, global);
goog.exportSymbol('proto.push.v1.EncryptionDetails', null, global);
goog.exportSymbol('proto.push.v1.EncryptionType', null, global);
goog.exportSymbol('proto.push.v1.InitDid', null, global);
goog.exportSymbol('proto.push.v1.KeyAction', null, global);
goog.exportSymbol('proto.push.v1.Notification', null, global);
goog.exportSymbol('proto.push.v1.Role', null, global);
goog.exportSymbol('proto.push.v1.SessionKeyAction', null, global);
goog.exportSymbol('proto.push.v1.Signer', null, global);
goog.exportSymbol('proto.push.v1.Transaction', null, global);
goog.exportSymbol('proto.push.v1.TransactionObj', null, global);
goog.exportSymbol('proto.push.v1.TxAttestorData', null, global);
goog.exportSymbol('proto.push.v1.TxValidatorData', null, global);
goog.exportSymbol('proto.push.v1.Vote', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.DidMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.DidMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.DidMapping.displayName = 'proto.push.v1.DidMapping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.TxValidatorData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.TxValidatorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.TxValidatorData.displayName = 'proto.push.v1.TxValidatorData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.TxAttestorData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.TxAttestorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.TxAttestorData.displayName = 'proto.push.v1.TxAttestorData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.TransactionObj = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.push.v1.TransactionObj.repeatedFields_, null);
};
goog.inherits(proto.push.v1.TransactionObj, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.TransactionObj.displayName = 'proto.push.v1.TransactionObj';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.Signer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.Signer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.Signer.displayName = 'proto.push.v1.Signer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.push.v1.Block.repeatedFields_, null);
};
goog.inherits(proto.push.v1.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.Block.displayName = 'proto.push.v1.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.push.v1.Transaction.repeatedFields_, null);
};
goog.inherits(proto.push.v1.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.Transaction.displayName = 'proto.push.v1.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.InitDid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.InitDid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.InitDid.displayName = 'proto.push.v1.InitDid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.SessionKeyAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.SessionKeyAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.SessionKeyAction.displayName = 'proto.push.v1.SessionKeyAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.Notification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.Notification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.Notification.displayName = 'proto.push.v1.Notification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.EncryptionDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.EncryptionDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.EncryptionDetails.displayName = 'proto.push.v1.EncryptionDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.EncryptedNotif = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.push.v1.EncryptedNotif.repeatedFields_, null);
};
goog.inherits(proto.push.v1.EncryptedNotif, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.EncryptedNotif.displayName = 'proto.push.v1.EncryptedNotif';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.Attachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.push.v1.Attachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.Attachment.displayName = 'proto.push.v1.Attachment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.push.v1.Email = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.push.v1.Email.repeatedFields_, null);
};
goog.inherits(proto.push.v1.Email, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.push.v1.Email.displayName = 'proto.push.v1.Email';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.DidMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.DidMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.DidMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.DidMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    didmappingMap: (f = msg.getDidmappingMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.DidMapping}
 */
proto.push.v1.DidMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.DidMapping;
  return proto.push.v1.DidMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.DidMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.DidMapping}
 */
proto.push.v1.DidMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDidmappingMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.DidMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.DidMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.DidMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.DidMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDidmappingMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> didMapping = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.push.v1.DidMapping.prototype.getDidmappingMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.push.v1.DidMapping} returns this
 */
proto.push.v1.DidMapping.prototype.clearDidmappingMap = function() {
  this.getDidmappingMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.TxValidatorData.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.TxValidatorData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.TxValidatorData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TxValidatorData.toObject = function(includeInstance, msg) {
  var f, obj = {
    vote: jspb.Message.getFieldWithDefault(msg, 1, 0),
    didmapping: (f = msg.getDidmapping()) && proto.push.v1.DidMapping.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.TxValidatorData}
 */
proto.push.v1.TxValidatorData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.TxValidatorData;
  return proto.push.v1.TxValidatorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.TxValidatorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.TxValidatorData}
 */
proto.push.v1.TxValidatorData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.push.v1.Vote} */ (reader.readEnum());
      msg.setVote(value);
      break;
    case 2:
      var value = new proto.push.v1.DidMapping;
      reader.readMessage(value,proto.push.v1.DidMapping.deserializeBinaryFromReader);
      msg.setDidmapping(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.TxValidatorData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.TxValidatorData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.TxValidatorData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TxValidatorData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVote();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDidmapping();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.push.v1.DidMapping.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vote vote = 1;
 * @return {!proto.push.v1.Vote}
 */
proto.push.v1.TxValidatorData.prototype.getVote = function() {
  return /** @type {!proto.push.v1.Vote} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.push.v1.Vote} value
 * @return {!proto.push.v1.TxValidatorData} returns this
 */
proto.push.v1.TxValidatorData.prototype.setVote = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional DidMapping didMapping = 2;
 * @return {?proto.push.v1.DidMapping}
 */
proto.push.v1.TxValidatorData.prototype.getDidmapping = function() {
  return /** @type{?proto.push.v1.DidMapping} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.DidMapping, 2));
};


/**
 * @param {?proto.push.v1.DidMapping|undefined} value
 * @return {!proto.push.v1.TxValidatorData} returns this
*/
proto.push.v1.TxValidatorData.prototype.setDidmapping = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.TxValidatorData} returns this
 */
proto.push.v1.TxValidatorData.prototype.clearDidmapping = function() {
  return this.setDidmapping(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.TxValidatorData.prototype.hasDidmapping = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.TxAttestorData.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.TxAttestorData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.TxAttestorData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TxAttestorData.toObject = function(includeInstance, msg) {
  var f, obj = {
    vote: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.TxAttestorData}
 */
proto.push.v1.TxAttestorData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.TxAttestorData;
  return proto.push.v1.TxAttestorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.TxAttestorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.TxAttestorData}
 */
proto.push.v1.TxAttestorData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.push.v1.Vote} */ (reader.readEnum());
      msg.setVote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.TxAttestorData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.TxAttestorData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.TxAttestorData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TxAttestorData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVote();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Vote vote = 1;
 * @return {!proto.push.v1.Vote}
 */
proto.push.v1.TxAttestorData.prototype.getVote = function() {
  return /** @type {!proto.push.v1.Vote} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.push.v1.Vote} value
 * @return {!proto.push.v1.TxAttestorData} returns this
 */
proto.push.v1.TxAttestorData.prototype.setVote = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.push.v1.TransactionObj.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.TransactionObj.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.TransactionObj.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.TransactionObj} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TransactionObj.toObject = function(includeInstance, msg) {
  var f, obj = {
    tx: (f = msg.getTx()) && proto.push.v1.Transaction.toObject(includeInstance, f),
    validatordata: (f = msg.getValidatordata()) && proto.push.v1.TxValidatorData.toObject(includeInstance, f),
    attestordataList: jspb.Message.toObjectList(msg.getAttestordataList(),
    proto.push.v1.TxAttestorData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.TransactionObj}
 */
proto.push.v1.TransactionObj.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.TransactionObj;
  return proto.push.v1.TransactionObj.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.TransactionObj} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.TransactionObj}
 */
proto.push.v1.TransactionObj.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.push.v1.Transaction;
      reader.readMessage(value,proto.push.v1.Transaction.deserializeBinaryFromReader);
      msg.setTx(value);
      break;
    case 2:
      var value = new proto.push.v1.TxValidatorData;
      reader.readMessage(value,proto.push.v1.TxValidatorData.deserializeBinaryFromReader);
      msg.setValidatordata(value);
      break;
    case 3:
      var value = new proto.push.v1.TxAttestorData;
      reader.readMessage(value,proto.push.v1.TxAttestorData.deserializeBinaryFromReader);
      msg.addAttestordata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.TransactionObj.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.TransactionObj.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.TransactionObj} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.TransactionObj.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.push.v1.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getValidatordata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.push.v1.TxValidatorData.serializeBinaryToWriter
    );
  }
  f = message.getAttestordataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.push.v1.TxAttestorData.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transaction tx = 1;
 * @return {?proto.push.v1.Transaction}
 */
proto.push.v1.TransactionObj.prototype.getTx = function() {
  return /** @type{?proto.push.v1.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.Transaction, 1));
};


/**
 * @param {?proto.push.v1.Transaction|undefined} value
 * @return {!proto.push.v1.TransactionObj} returns this
*/
proto.push.v1.TransactionObj.prototype.setTx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.TransactionObj} returns this
 */
proto.push.v1.TransactionObj.prototype.clearTx = function() {
  return this.setTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.TransactionObj.prototype.hasTx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TxValidatorData validatorData = 2;
 * @return {?proto.push.v1.TxValidatorData}
 */
proto.push.v1.TransactionObj.prototype.getValidatordata = function() {
  return /** @type{?proto.push.v1.TxValidatorData} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.TxValidatorData, 2));
};


/**
 * @param {?proto.push.v1.TxValidatorData|undefined} value
 * @return {!proto.push.v1.TransactionObj} returns this
*/
proto.push.v1.TransactionObj.prototype.setValidatordata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.TransactionObj} returns this
 */
proto.push.v1.TransactionObj.prototype.clearValidatordata = function() {
  return this.setValidatordata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.TransactionObj.prototype.hasValidatordata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated TxAttestorData attestorData = 3;
 * @return {!Array<!proto.push.v1.TxAttestorData>}
 */
proto.push.v1.TransactionObj.prototype.getAttestordataList = function() {
  return /** @type{!Array<!proto.push.v1.TxAttestorData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.push.v1.TxAttestorData, 3));
};


/**
 * @param {!Array<!proto.push.v1.TxAttestorData>} value
 * @return {!proto.push.v1.TransactionObj} returns this
*/
proto.push.v1.TransactionObj.prototype.setAttestordataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.push.v1.TxAttestorData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.push.v1.TxAttestorData}
 */
proto.push.v1.TransactionObj.prototype.addAttestordata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.push.v1.TxAttestorData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.push.v1.TransactionObj} returns this
 */
proto.push.v1.TransactionObj.prototype.clearAttestordataList = function() {
  return this.setAttestordataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.Signer.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.Signer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.Signer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Signer.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: jspb.Message.getFieldWithDefault(msg, 1, ""),
    role: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sig: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.Signer}
 */
proto.push.v1.Signer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.Signer;
  return proto.push.v1.Signer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.Signer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.Signer}
 */
proto.push.v1.Signer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNode(value);
      break;
    case 2:
      var value = /** @type {!proto.push.v1.Role} */ (reader.readEnum());
      msg.setRole(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.Signer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.Signer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.Signer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Signer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSig();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string node = 1;
 * @return {string}
 */
proto.push.v1.Signer.prototype.getNode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Signer} returns this
 */
proto.push.v1.Signer.prototype.setNode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Role role = 2;
 * @return {!proto.push.v1.Role}
 */
proto.push.v1.Signer.prototype.getRole = function() {
  return /** @type {!proto.push.v1.Role} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.push.v1.Role} value
 * @return {!proto.push.v1.Signer} returns this
 */
proto.push.v1.Signer.prototype.setRole = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string sig = 3;
 * @return {string}
 */
proto.push.v1.Signer.prototype.getSig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Signer} returns this
 */
proto.push.v1.Signer.prototype.setSig = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.push.v1.Block.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    ts: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txobjList: jspb.Message.toObjectList(msg.getTxobjList(),
    proto.push.v1.TransactionObj.toObject, includeInstance),
    signersList: jspb.Message.toObjectList(msg.getSignersList(),
    proto.push.v1.Signer.toObject, includeInstance),
    attesttoken: msg.getAttesttoken_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.Block}
 */
proto.push.v1.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.Block;
  return proto.push.v1.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.Block}
 */
proto.push.v1.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTs(value);
      break;
    case 2:
      var value = new proto.push.v1.TransactionObj;
      reader.readMessage(value,proto.push.v1.TransactionObj.deserializeBinaryFromReader);
      msg.addTxobj(value);
      break;
    case 3:
      var value = new proto.push.v1.Signer;
      reader.readMessage(value,proto.push.v1.Signer.deserializeBinaryFromReader);
      msg.addSigners(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttesttoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTs();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTxobjList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.push.v1.TransactionObj.serializeBinaryToWriter
    );
  }
  f = message.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.push.v1.Signer.serializeBinaryToWriter
    );
  }
  f = message.getAttesttoken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint64 ts = 1;
 * @return {number}
 */
proto.push.v1.Block.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.push.v1.Block} returns this
 */
proto.push.v1.Block.prototype.setTs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated TransactionObj txObj = 2;
 * @return {!Array<!proto.push.v1.TransactionObj>}
 */
proto.push.v1.Block.prototype.getTxobjList = function() {
  return /** @type{!Array<!proto.push.v1.TransactionObj>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.push.v1.TransactionObj, 2));
};


/**
 * @param {!Array<!proto.push.v1.TransactionObj>} value
 * @return {!proto.push.v1.Block} returns this
*/
proto.push.v1.Block.prototype.setTxobjList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.push.v1.TransactionObj=} opt_value
 * @param {number=} opt_index
 * @return {!proto.push.v1.TransactionObj}
 */
proto.push.v1.Block.prototype.addTxobj = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.push.v1.TransactionObj, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.push.v1.Block} returns this
 */
proto.push.v1.Block.prototype.clearTxobjList = function() {
  return this.setTxobjList([]);
};


/**
 * repeated Signer signers = 3;
 * @return {!Array<!proto.push.v1.Signer>}
 */
proto.push.v1.Block.prototype.getSignersList = function() {
  return /** @type{!Array<!proto.push.v1.Signer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.push.v1.Signer, 3));
};


/**
 * @param {!Array<!proto.push.v1.Signer>} value
 * @return {!proto.push.v1.Block} returns this
*/
proto.push.v1.Block.prototype.setSignersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.push.v1.Signer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.push.v1.Signer}
 */
proto.push.v1.Block.prototype.addSigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.push.v1.Signer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.push.v1.Block} returns this
 */
proto.push.v1.Block.prototype.clearSignersList = function() {
  return this.setSignersList([]);
};


/**
 * optional bytes attestToken = 4;
 * @return {!(string|Uint8Array)}
 */
proto.push.v1.Block.prototype.getAttesttoken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes attestToken = 4;
 * This is a type-conversion wrapper around `getAttesttoken()`
 * @return {string}
 */
proto.push.v1.Block.prototype.getAttesttoken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttesttoken()));
};


/**
 * optional bytes attestToken = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttesttoken()`
 * @return {!Uint8Array}
 */
proto.push.v1.Block.prototype.getAttesttoken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttesttoken()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.push.v1.Block} returns this
 */
proto.push.v1.Block.prototype.setAttesttoken = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.push.v1.Transaction.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    category: jspb.Message.getFieldWithDefault(msg, 2, ""),
    source: jspb.Message.getFieldWithDefault(msg, 3, ""),
    recipientsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    data: msg.getData_asB64(),
    salt: msg.getSalt_asB64(),
    apitoken: msg.getApitoken_asB64(),
    signature: msg.getSignature_asB64(),
    fee: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.Transaction}
 */
proto.push.v1.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.Transaction;
  return proto.push.v1.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.Transaction}
 */
proto.push.v1.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addRecipients(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSalt(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setApitoken(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRecipientsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getApitoken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getFee();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional uint32 type = 1;
 * @return {number}
 */
proto.push.v1.Transaction.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.push.v1.Transaction} returns this
 */
proto.push.v1.Transaction.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string category = 2;
 * @return {string}
 */
proto.push.v1.Transaction.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Transaction} returns this
 */
proto.push.v1.Transaction.prototype.setCategory = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string source = 3;
 * @return {string}
 */
proto.push.v1.Transaction.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Transaction} returns this
 */
proto.push.v1.Transaction.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string recipients = 4;
 * @return {!Array<string>}
 */
proto.push.v1.Transaction.prototype.getRecipientsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.push.v1.Transaction} returns this
 */
proto.push.v1.Transaction.prototype.setRecipientsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.push.v1.Transaction} returns this
 */
proto.push.v1.Transaction.prototype.addRecipients = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.push.v1.Transaction} returns this
 */
proto.push.v1.Transaction.prototype.clearRecipientsList = function() {
  return this.setRecipientsList([]);
};


/**
 * optional bytes data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.push.v1.Transaction.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.push.v1.Transaction.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.push.v1.Transaction.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.push.v1.Transaction} returns this
 */
proto.push.v1.Transaction.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes salt = 6;
 * @return {!(string|Uint8Array)}
 */
proto.push.v1.Transaction.prototype.getSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes salt = 6;
 * This is a type-conversion wrapper around `getSalt()`
 * @return {string}
 */
proto.push.v1.Transaction.prototype.getSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSalt()));
};


/**
 * optional bytes salt = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSalt()`
 * @return {!Uint8Array}
 */
proto.push.v1.Transaction.prototype.getSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSalt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.push.v1.Transaction} returns this
 */
proto.push.v1.Transaction.prototype.setSalt = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes apiToken = 7;
 * @return {!(string|Uint8Array)}
 */
proto.push.v1.Transaction.prototype.getApitoken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes apiToken = 7;
 * This is a type-conversion wrapper around `getApitoken()`
 * @return {string}
 */
proto.push.v1.Transaction.prototype.getApitoken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getApitoken()));
};


/**
 * optional bytes apiToken = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getApitoken()`
 * @return {!Uint8Array}
 */
proto.push.v1.Transaction.prototype.getApitoken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getApitoken()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.push.v1.Transaction} returns this
 */
proto.push.v1.Transaction.prototype.setApitoken = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes signature = 8;
 * @return {!(string|Uint8Array)}
 */
proto.push.v1.Transaction.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes signature = 8;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.push.v1.Transaction.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.push.v1.Transaction.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.push.v1.Transaction} returns this
 */
proto.push.v1.Transaction.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional string fee = 9;
 * @return {string}
 */
proto.push.v1.Transaction.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Transaction} returns this
 */
proto.push.v1.Transaction.prototype.setFee = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.InitDid.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.InitDid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.InitDid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.InitDid.toObject = function(includeInstance, msg) {
  var f, obj = {
    did: jspb.Message.getFieldWithDefault(msg, 1, ""),
    masterpubkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    derivedkeyindex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    derivedpubkey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    encderivedprivkey: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.InitDid}
 */
proto.push.v1.InitDid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.InitDid;
  return proto.push.v1.InitDid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.InitDid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.InitDid}
 */
proto.push.v1.InitDid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMasterpubkey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDerivedkeyindex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDerivedpubkey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncderivedprivkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.InitDid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.InitDid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.InitDid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.InitDid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMasterpubkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDerivedkeyindex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDerivedpubkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEncderivedprivkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string did = 1;
 * @return {string}
 */
proto.push.v1.InitDid.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.InitDid} returns this
 */
proto.push.v1.InitDid.prototype.setDid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string masterPubKey = 2;
 * @return {string}
 */
proto.push.v1.InitDid.prototype.getMasterpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.InitDid} returns this
 */
proto.push.v1.InitDid.prototype.setMasterpubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 derivedKeyIndex = 3;
 * @return {number}
 */
proto.push.v1.InitDid.prototype.getDerivedkeyindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.push.v1.InitDid} returns this
 */
proto.push.v1.InitDid.prototype.setDerivedkeyindex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string derivedPubKey = 4;
 * @return {string}
 */
proto.push.v1.InitDid.prototype.getDerivedpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.InitDid} returns this
 */
proto.push.v1.InitDid.prototype.setDerivedpubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string encDerivedPrivKey = 5;
 * @return {string}
 */
proto.push.v1.InitDid.prototype.getEncderivedprivkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.InitDid} returns this
 */
proto.push.v1.InitDid.prototype.setEncderivedprivkey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.SessionKeyAction.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.SessionKeyAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.SessionKeyAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SessionKeyAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keyaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    action: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.SessionKeyAction}
 */
proto.push.v1.SessionKeyAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.SessionKeyAction;
  return proto.push.v1.SessionKeyAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.SessionKeyAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.SessionKeyAction}
 */
proto.push.v1.SessionKeyAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeyindex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyaddress(value);
      break;
    case 3:
      var value = /** @type {!proto.push.v1.KeyAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.SessionKeyAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.SessionKeyAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.SessionKeyAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.SessionKeyAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyindex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getKeyaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 keyIndex = 1;
 * @return {number}
 */
proto.push.v1.SessionKeyAction.prototype.getKeyindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.push.v1.SessionKeyAction} returns this
 */
proto.push.v1.SessionKeyAction.prototype.setKeyindex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string keyAddress = 2;
 * @return {string}
 */
proto.push.v1.SessionKeyAction.prototype.getKeyaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.SessionKeyAction} returns this
 */
proto.push.v1.SessionKeyAction.prototype.setKeyaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional KeyAction action = 3;
 * @return {!proto.push.v1.KeyAction}
 */
proto.push.v1.SessionKeyAction.prototype.getAction = function() {
  return /** @type {!proto.push.v1.KeyAction} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.push.v1.KeyAction} value
 * @return {!proto.push.v1.SessionKeyAction} returns this
 */
proto.push.v1.SessionKeyAction.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.Notification.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.Notification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.Notification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Notification.toObject = function(includeInstance, msg) {
  var f, obj = {
    app: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    body: jspb.Message.getFieldWithDefault(msg, 3, ""),
    channelurl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    actionurl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    img: jspb.Message.getFieldWithDefault(msg, 6, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.Notification}
 */
proto.push.v1.Notification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.Notification;
  return proto.push.v1.Notification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.Notification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.Notification}
 */
proto.push.v1.Notification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelurl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionurl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setImg(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.Notification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.Notification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.Notification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Notification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChannelurl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getActionurl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getImg();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string app = 1;
 * @return {string}
 */
proto.push.v1.Notification.prototype.getApp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Notification} returns this
 */
proto.push.v1.Notification.prototype.setApp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.push.v1.Notification.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Notification} returns this
 */
proto.push.v1.Notification.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string body = 3;
 * @return {string}
 */
proto.push.v1.Notification.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Notification} returns this
 */
proto.push.v1.Notification.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string channelUrl = 4;
 * @return {string}
 */
proto.push.v1.Notification.prototype.getChannelurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Notification} returns this
 */
proto.push.v1.Notification.prototype.setChannelurl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string actionUrl = 5;
 * @return {string}
 */
proto.push.v1.Notification.prototype.getActionurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Notification} returns this
 */
proto.push.v1.Notification.prototype.setActionurl = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string img = 6;
 * @return {string}
 */
proto.push.v1.Notification.prototype.getImg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Notification} returns this
 */
proto.push.v1.Notification.prototype.setImg = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string icon = 7;
 * @return {string}
 */
proto.push.v1.Notification.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Notification} returns this
 */
proto.push.v1.Notification.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.EncryptionDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.EncryptionDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.EncryptionDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.EncryptionDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipientdid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    keyindex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    encryptedsecret: msg.getEncryptedsecret_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.EncryptionDetails}
 */
proto.push.v1.EncryptionDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.EncryptionDetails;
  return proto.push.v1.EncryptionDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.EncryptionDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.EncryptionDetails}
 */
proto.push.v1.EncryptionDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientdid(value);
      break;
    case 2:
      var value = /** @type {!proto.push.v1.EncryptionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeyindex(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptedsecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.EncryptionDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.EncryptionDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.EncryptionDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.EncryptionDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipientdid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getKeyindex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEncryptedsecret_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string recipientDID = 1;
 * @return {string}
 */
proto.push.v1.EncryptionDetails.prototype.getRecipientdid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.EncryptionDetails} returns this
 */
proto.push.v1.EncryptionDetails.prototype.setRecipientdid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EncryptionType type = 2;
 * @return {!proto.push.v1.EncryptionType}
 */
proto.push.v1.EncryptionDetails.prototype.getType = function() {
  return /** @type {!proto.push.v1.EncryptionType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.push.v1.EncryptionType} value
 * @return {!proto.push.v1.EncryptionDetails} returns this
 */
proto.push.v1.EncryptionDetails.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 keyIndex = 3;
 * @return {number}
 */
proto.push.v1.EncryptionDetails.prototype.getKeyindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.push.v1.EncryptionDetails} returns this
 */
proto.push.v1.EncryptionDetails.prototype.setKeyindex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes encryptedSecret = 4;
 * @return {!(string|Uint8Array)}
 */
proto.push.v1.EncryptionDetails.prototype.getEncryptedsecret = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes encryptedSecret = 4;
 * This is a type-conversion wrapper around `getEncryptedsecret()`
 * @return {string}
 */
proto.push.v1.EncryptionDetails.prototype.getEncryptedsecret_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptedsecret()));
};


/**
 * optional bytes encryptedSecret = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedsecret()`
 * @return {!Uint8Array}
 */
proto.push.v1.EncryptionDetails.prototype.getEncryptedsecret_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptedsecret()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.push.v1.EncryptionDetails} returns this
 */
proto.push.v1.EncryptionDetails.prototype.setEncryptedsecret = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.push.v1.EncryptedNotif.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.EncryptedNotif.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.EncryptedNotif.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.EncryptedNotif} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.EncryptedNotif.toObject = function(includeInstance, msg) {
  var f, obj = {
    encryptednotif: msg.getEncryptednotif_asB64(),
    sourceenc: (f = msg.getSourceenc()) && proto.push.v1.EncryptionDetails.toObject(includeInstance, f),
    targetencList: jspb.Message.toObjectList(msg.getTargetencList(),
    proto.push.v1.EncryptionDetails.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.EncryptedNotif}
 */
proto.push.v1.EncryptedNotif.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.EncryptedNotif;
  return proto.push.v1.EncryptedNotif.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.EncryptedNotif} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.EncryptedNotif}
 */
proto.push.v1.EncryptedNotif.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptednotif(value);
      break;
    case 2:
      var value = new proto.push.v1.EncryptionDetails;
      reader.readMessage(value,proto.push.v1.EncryptionDetails.deserializeBinaryFromReader);
      msg.setSourceenc(value);
      break;
    case 3:
      var value = new proto.push.v1.EncryptionDetails;
      reader.readMessage(value,proto.push.v1.EncryptionDetails.deserializeBinaryFromReader);
      msg.addTargetenc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.EncryptedNotif.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.EncryptedNotif.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.EncryptedNotif} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.EncryptedNotif.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncryptednotif_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSourceenc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.push.v1.EncryptionDetails.serializeBinaryToWriter
    );
  }
  f = message.getTargetencList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.push.v1.EncryptionDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes encryptedNotif = 1;
 * @return {!(string|Uint8Array)}
 */
proto.push.v1.EncryptedNotif.prototype.getEncryptednotif = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes encryptedNotif = 1;
 * This is a type-conversion wrapper around `getEncryptednotif()`
 * @return {string}
 */
proto.push.v1.EncryptedNotif.prototype.getEncryptednotif_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptednotif()));
};


/**
 * optional bytes encryptedNotif = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptednotif()`
 * @return {!Uint8Array}
 */
proto.push.v1.EncryptedNotif.prototype.getEncryptednotif_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptednotif()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.push.v1.EncryptedNotif} returns this
 */
proto.push.v1.EncryptedNotif.prototype.setEncryptednotif = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional EncryptionDetails sourceEnc = 2;
 * @return {?proto.push.v1.EncryptionDetails}
 */
proto.push.v1.EncryptedNotif.prototype.getSourceenc = function() {
  return /** @type{?proto.push.v1.EncryptionDetails} */ (
    jspb.Message.getWrapperField(this, proto.push.v1.EncryptionDetails, 2));
};


/**
 * @param {?proto.push.v1.EncryptionDetails|undefined} value
 * @return {!proto.push.v1.EncryptedNotif} returns this
*/
proto.push.v1.EncryptedNotif.prototype.setSourceenc = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.push.v1.EncryptedNotif} returns this
 */
proto.push.v1.EncryptedNotif.prototype.clearSourceenc = function() {
  return this.setSourceenc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.push.v1.EncryptedNotif.prototype.hasSourceenc = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated EncryptionDetails targetEnc = 3;
 * @return {!Array<!proto.push.v1.EncryptionDetails>}
 */
proto.push.v1.EncryptedNotif.prototype.getTargetencList = function() {
  return /** @type{!Array<!proto.push.v1.EncryptionDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.push.v1.EncryptionDetails, 3));
};


/**
 * @param {!Array<!proto.push.v1.EncryptionDetails>} value
 * @return {!proto.push.v1.EncryptedNotif} returns this
*/
proto.push.v1.EncryptedNotif.prototype.setTargetencList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.push.v1.EncryptionDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.push.v1.EncryptionDetails}
 */
proto.push.v1.EncryptedNotif.prototype.addTargetenc = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.push.v1.EncryptionDetails, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.push.v1.EncryptedNotif} returns this
 */
proto.push.v1.EncryptedNotif.prototype.clearTargetencList = function() {
  return this.setTargetencList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.Attachment.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.Attachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.Attachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Attachment.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    content: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.Attachment}
 */
proto.push.v1.Attachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.Attachment;
  return proto.push.v1.Attachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.Attachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.Attachment}
 */
proto.push.v1.Attachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.Attachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.Attachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.Attachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Attachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string filename = 1;
 * @return {string}
 */
proto.push.v1.Attachment.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Attachment} returns this
 */
proto.push.v1.Attachment.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.push.v1.Attachment.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Attachment} returns this
 */
proto.push.v1.Attachment.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.push.v1.Attachment.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Attachment} returns this
 */
proto.push.v1.Attachment.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.push.v1.Email.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.push.v1.Email.prototype.toObject = function(opt_includeInstance) {
  return proto.push.v1.Email.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.push.v1.Email} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Email.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attachmentsList: jspb.Message.toObjectList(msg.getAttachmentsList(),
    proto.push.v1.Attachment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.push.v1.Email}
 */
proto.push.v1.Email.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.push.v1.Email;
  return proto.push.v1.Email.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.push.v1.Email} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.push.v1.Email}
 */
proto.push.v1.Email.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 3:
      var value = new proto.push.v1.Attachment;
      reader.readMessage(value,proto.push.v1.Attachment.deserializeBinaryFromReader);
      msg.addAttachments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.push.v1.Email.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.push.v1.Email.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.push.v1.Email} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.push.v1.Email.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttachmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.push.v1.Attachment.serializeBinaryToWriter
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.push.v1.Email.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Email} returns this
 */
proto.push.v1.Email.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string body = 2;
 * @return {string}
 */
proto.push.v1.Email.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.push.v1.Email} returns this
 */
proto.push.v1.Email.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Attachment attachments = 3;
 * @return {!Array<!proto.push.v1.Attachment>}
 */
proto.push.v1.Email.prototype.getAttachmentsList = function() {
  return /** @type{!Array<!proto.push.v1.Attachment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.push.v1.Attachment, 3));
};


/**
 * @param {!Array<!proto.push.v1.Attachment>} value
 * @return {!proto.push.v1.Email} returns this
*/
proto.push.v1.Email.prototype.setAttachmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.push.v1.Attachment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.push.v1.Attachment}
 */
proto.push.v1.Email.prototype.addAttachments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.push.v1.Attachment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.push.v1.Email} returns this
 */
proto.push.v1.Email.prototype.clearAttachmentsList = function() {
  return this.setAttachmentsList([]);
};


/**
 * @enum {number}
 */
proto.push.v1.Role = {
  ROLE_UNSPECIFIED: 0,
  VALIDATOR: 1,
  ATTESTER: 2
};

/**
 * @enum {number}
 */
proto.push.v1.Vote = {
  VOTE_UNSPECIFIED: 0,
  ACCEPTED: 1,
  REJECTED: 2
};

/**
 * @enum {number}
 */
proto.push.v1.KeyAction = {
  UNSPECIFIED: 0,
  PUBLISH_KEY: 1,
  REVOKE_KEY: 2
};

/**
 * @enum {number}
 */
proto.push.v1.EncryptionType = {
  ENCRYPTION_UNSPECIFIED: 0,
  ECC: 1
};

goog.object.extend(exports, proto.push.v1);
